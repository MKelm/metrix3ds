CLEAR:CLS:PNLTYPE "OFF"

'-----------------------------------INIT

'initialize base variables
DIM BLOCKCLRS(4) 'contains 4 colors for blocks
DIM BLOCKS(11,8) 'contains all block color status
DIM BLOCKSM(8) 'contains last moving block position
DIM CBLOCK(2) 'current block position y/x
TSTEPS=0:TIME=0:POINTS=0 'time steps / time in seconds / points values
INBTN=0 'input button status

'initialize block colors
BLOCKCLRS(0)=2 'red
BLOCKCLRS(1)=6 'blue
BLOCKCLRS(2)=11 'green
BLOCKCLRS(3)=12 'yellow

'initialize all blocks as unused
FOR Y = 0 TO 10
FOR X = 0 TO 7
BLOCKS(Y,X)=14 'black for invisible
NEXT X
NEXT Y

'initialize current block not active
CBLOCK(0)=-1:CBLOCK(1)=-1

'set initial header text output
LOCATE 0,1:?"TIME 0"
LOCATE 13,1:?"METRIX"
LOCATE 27,1:?"0 PTS"

'draw empty blocks
GPAGEID=0:XOFS=0:YOFS=1
GOSUB @DRAWEMPTYBLOCKS
GPAGEID=1:XOFS=0:YOFS=0
GOSUB @DRAWEMPTYBLOCKS

'-----------------------------------RUN/STOP

@RUN
'update time/points
VSYNC 1:TSTEPS=TSTEPS+1
IF TSTEPS==60 THEN GOSUB @UPDATETIME
GOSUB @UPDATEPOINTS

'set new block if current block is not active
IF CBLOCK(0)==-1 AND CBLOCK(1)==-1 THEN GOSUB @SETNEWBLOCK
IF SETBTRYC>100 THEN GOTO @STOP 'game over, no more free space

'get input button
INBTN=BUTTON()

'perform movements with tstep condition every 0.5 second
BLOCKY=CBLOCK(0):BLOCKX=CBLOCK(1)
IF INBTN != 0 AND INBTN==4 AND CBLOCK(1)>0 THEN GOSUB @MOVEBLOCKLEFT
IF INBTN != 0 AND INBTN==8 AND CBLOCK(1)<7 THEN GOSUB @MOVEBLOCKRIGHT
GOSUB @MOVEBLOCKSDOWN
GOSUB @DETECTMBLOCKS
GOSUB @RMBLOCKSCHECK

GOTO @RUN

@STOP
LOCATE 12,2:?"GAME OVER"
GOTO @STOP

'-----------------------------------SUBS

'detect last moving blocks in one column
@DETECTMBLOCKS
IF TSTEPS%30!=0 THEN RETURN
FOR X=0 TO 7
BLOCKSM(X)=-1
FOR Y=0 TO 9
IF BLOCKS(Y,X)!=14 AND BLOCKS(Y+1,X)==14 THEN BLOCKSM(X)=Y
NEXT Y
NEXT X
RETURN

'try to set new block and set/draw block if possible
@SETNEWBLOCK
IF SETBTRYC<0 OR SETBTRYC>100 THEN SETBTRYC=0
BLOCKY=0
BLOCKX=RND(8)
SETBTRYC=SETBTRYC+1
IF SETBTRYC>100 THEN RETURN
IF BLOCKS(BLOCKY,BLOCKX)!=14 THEN GOTO @SETNEWBLOCK
CBLOCK(0)=BLOCKY
CBLOCK(1)=BLOCKX
BLOCKS(CBLOCK(0),CBLOCK(1))=BLOCKCLRS(RND(4))
GOSUB @DRAWBLOCK
RETURN

'move all blocks down which have empty space below block
@MOVEBLOCKSDOWN
IF TSTEPS%30!=0 THEN RETURN

'reset current block before it is no longer moveable
IF CBLOCK(0)+1==10 OR BLOCKS(CBLOCK(0)+1,CBLOCK(1))!=14 THEN CBLOCK(0)=-1:CBLOCK(1)=-1

FOR Y = 9 TO 0 STEP -1
FOR X = 0 TO 7
IF BLOCKS(Y,X)!=14 AND BLOCKS(Y+1,X)==14 THEN BLOCKY=Y:BLOCKX=X:GOSUB @MOVEBLOCKDOWN
NEXT X
NEXT Y
RETURN

'needs BLOCKY/BLOCKX to move block down
@MOVEBLOCKDOWN
IF BLOCKS(BLOCKY+1,BLOCKX)!=14 THEN RETURN
CBLOCKCLR=BLOCKS(BLOCKY,BLOCKX)
BLOCKS(BLOCKY,BLOCKX)=14
GOSUB @DRAWBLOCK
BLOCKY=BLOCKY+1
BLOCKS(BLOCKY,BLOCKX)=CBLOCKCLR
GOSUB @DRAWBLOCK
'change current block position
IF BLOCKY-1==CBLOCK(0) AND BLOCKX==CBLOCK(1) THEN CBLOCK(0)=BLOCKY
RETURN

'needs BLOCKY/BLOCKX to move block left
@MOVEBLOCKLEFT
IF TSTEPS%30!=0 OR BLOCKS(BLOCKY,BLOCKX-1)!=14 THEN RETURN
CBLOCKCLR=BLOCKS(BLOCKY,BLOCKX)
BLOCKS(BLOCKY,BLOCKX)=14
GOSUB @DRAWBLOCK
BLOCKX=BLOCKX-1
BLOCKS(BLOCKY,BLOCKX)=CBLOCKCLR
GOSUB @DRAWBLOCK
IF BLOCKX+1==CBLOCK(1) AND BLOCKY==CBLOCK(0) THEN CBLOCK(1)=BLOCKX
RETURN

'needs BLOCKY/BLOCKX to move block right
@MOVEBLOCKRIGHT
IF TSTEPS%30!=0 OR BLOCKS(BLOCKY,BLOCKX+1)!=14 THEN RETURN
CBLOCKCLR=BLOCKS(BLOCKY,BLOCKX)
BLOCKS(BLOCKY,BLOCKX)=14
GOSUB @DRAWBLOCK
BLOCKX=BLOCKX+1
BLOCKS(BLOCKY,BLOCKX)=CBLOCKCLR
GOSUB @DRAWBLOCK
IF BLOCKX-1==CBLOCK(1) AND BLOCKY==CBLOCK(0) THEN CBLOCK(1)=BLOCKX
RETURN

'needs BLOCKY/BLOCKX to draw block
@DRAWBLOCK
XPOFS=BLOCKX*32
IF BLOCKY<5 THEN GPAGE 0
IF BLOCKY<5 THEN YPOFS=(1+BLOCKY)*32
IF BLOCKY>4 THEN GPAGE 1
IF BLOCKY>4 THEN YPOFS=(-5+BLOCKY)*32
GFILL XPOFS,YPOFS,XPOFS+31,YPOFS+31,BLOCKS(BLOCKY,BLOCKX)
GBOX XPOFS,YPOFS,XPOFS+31,YPOFS+31,15
RETURN

'draw all blocks as empty selected gpage
@DRAWEMPTYBLOCKS
GPAGE GPAGEID:GCLS
FOR Y = YOFS TO 6-1
FOR X = XOFS TO 8-1
GFILL X*32,Y*32,X*32+31,Y*32+31,14
GBOX X*32,Y*32,X*32+31,Y*32+31,15
NEXT X
NEXT Y
RETURN

'update points output in header
@UPDATEPOINTS
LOCATE 28-LEN(STR$(POINTS)),1:?POINTS
RETURN

'update time output in header
@UPDATETIME
TSTEPS=0
TIME=TIME+1
LOCATE 5,1:?TIME
RETURN

'-----------------------------------REMOVEBLOCKS

'check blocks and neighbours to remove bunches
@RMBLOCKSCHECK
IF TSTEPS%30!=0 THEN RETURN

FOR BLOCKX=0 TO 7
FOR BLOCKY=0 TO 10
IF BLOCKY>BLOCKSM(BLOCKX) THEN GOSUB @RMBLOCKS
NEXT BLOCKY
NEXT BLOCKX

RETURN

@RMBLOCKS
IF BLOCKS(BLOCKY,BLOCKX)==14 THEN RETURN
BCCHECK=1:BCSUM=0:BCCOLOR=BLOCKS(BLOCKY,BLOCKX)
GOSUB @RMBLOCKSR
IF BCSUM>3 THEN BCCHECK=0:POINTS=POINTS+(BCSUM*10)
BCCOLOR=BCCOLOR*-1
GOSUB @RMBLOCKSR
RETURN

@RMBLOCKSR
BCSUM=BCSUM+1
IF BCCHECK==1 THEN BLOCKS(BLOCKY,BLOCKX)=BLOCKS(BLOCKY,BLOCKX)*-1
IF BCCHECK==0 THEN GOSUB @RMBLOCKDRAW
IF BLOCKX>0 THEN GOSUB @RMBLOCKSLEFT
IF BLOCKX<7 THEN GOSUB @RMBLOCKSRIGHT
IF BLOCKY>0 THEN GOSUB @RMBLOCKSTOP
IF BLOCKY<9 THEN GOSUB @RMBLOCKSBOTTOM
RETURN

@RMBLOCKDRAW
BLOCKS(BLOCKY,BLOCKX)=14
IF CBLOCK(0)==BLOCKY AND CBLOCK(1)==BLOCKX THEN CBLOCK(0)=-1:CBLOCK(1)=-1
GOSUB @DRAWBLOCK
RETURN

@RMBLOCKSLEFT
'do not remove blocks of another color
IF BLOCKS(BLOCKY,BLOCKX-1)!=BCCOLOR THEN RETURN
BLOCKX=BLOCKX-1
'recursion to find/remove more blocks of the same color
GOSUB @RMBLOCKSR
BLOCKX=BLOCKX+1
RETURN

@RMBLOCKSRIGHT
IF BLOCKS(BLOCKY,BLOCKX+1)!=BCCOLOR THEN RETURN
BLOCKX=BLOCKX+1
GOSUB @RMBLOCKSR
BLOCKX=BLOCKX-1
RETURN

@RMBLOCKSTOP
IF BLOCKS(BLOCKY-1,BLOCKX)!=BCCOLOR THEN RETURN
BLOCKY=BLOCKY-1
GOSUB @RMBLOCKSR
BLOCKY=BLOCKY+1
RETURN

@RMBLOCKSBOTTOM
IF BLOCKS(BLOCKY+1,BLOCKX)!=BCCOLOR THEN RETURN
BLOCKY=BLOCKY+1
GOSUB @RMBLOCKSR
BLOCKY=BLOCKY-1
RETURN