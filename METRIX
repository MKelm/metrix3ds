CLEAR:CLS:PNLTYPE "OFF"

DIM BOXCLRS(4) 'contains 4 colors for boxes
DIM BOXES(11,8) 'contains all color status for boxes
DIM MBOXES(11,8) 'contains move status of main box
BOXROW=-1:BOXSPEED=0 'status values for current box
BTN=0:LASTBTN=0 'input button status
RCTN=1:NXOFS=-1 'run counter and new xoffset for box
TSTEP=0:TIME=0:POINTS=0 'time / points values

BOXCLRS(0)=2 'red
BOXCLRS(1)=6 'blue
BOXCLRS(2)=11 'green
BOXCLRS(3)=12 'yellow

'initialize all boxes as unused
FOR Y = 0 TO 10
FOR X = 0 TO 7
BOXES(Y,X)=14 'black for invisible
MBOXES(Y,X)=0 'no movement active
NEXT X
NEXT Y

'initialization
GOSUB @INITBOXTBL
GOSUB @INITHEADTXTS
GOTO @RUN

'initialize/set text output in header
@INITHEADTXTS
LOCATE 0,1:?"TIME 0"
LOCATE 10,1:?"METRIX ALPHA"
LOCATE 27,1:?"0 PTS"
RETURN

'intialize/set whole box table graphics
@INITBOXTBL
GPID=0:XOFS=0:YOFS=1
GOSUB @SETBOXTBLPAGE
GPID=1:XOFS=0:YOFS=0
GOSUB @SETBOXTBLPAGE
RETURN

'set box table graphics on one gpage
@SETBOXTBLPAGE
GPAGE GPID:GCLS
FOR Y = YOFS TO 6-1
FOR X = XOFS TO 8-1
GFILL X*32,Y*32,X*32+31,Y*32+31,14
GBOX X*32,Y*32,X*32+31,Y*32+31,15
NEXT X
NEXT Y
RETURN

'set box in start area with random color
@SETSTARTBOX
XOFS=RND(8)
YOFS=1
BOXCLR=BOXCLRS(RND(4))
GOSUB @SETBOX
BOXROW=0
RETURN

'set box in other areas on position change
@SETBOX
BOXES(YOFS-1,XOFS)=BOXCLR
IF YOFS<6 THEN GPAGE 0
IF YOFS<6 THEN CYOFS=YOFS
IF YOFS>5 THEN GPAGE 1
IF YOFS>5 THEN CYOFS=YOFS-6
XPOFS=XOFS*32
YPOFS=CYOFS*32
GFILL XPOFS,YPOFS,XPOFS+31,YPOFS+31,BOXCLR
GBOX XPOFS,YPOFS,XPOFS+31,YPOFS+31,15
RETURN

'move main box downwards
@MOVEBOX
IF BOXROW>10 THEN GOTO @INITNEWBOX
IF BOXES(YOFS,XOFS)!=14 THEN @INITNEWBOX
TMPBOXCLR=BOXCLR
BOXCLR=14
MBOXES(YOFS-1,XOFS)=0
GOSUB @SETBOX
BOXROW=BOXROW+1
IF NXOFS>-1 THEN XOFS=NXOFS
YOFS=1+BOXROW-1
BOXCLR=TMPBOXCLR
MBOXES(YOFS-1,XOFS)=1
GOSUB @SETBOX
NXOFS=-1
RETURN

'move all other boxes with space below box
@MOVEBOXES
FOR SCY = 0 TO 9
FOR SCX = 0 TO 7
IF BOXES(SCY,SCX)!=14 AND BOXES(SCY+1,SCX)==14 AND MBOXES(SCY,SCX)==0 THEN GOSUB @MOVEBOX2
NEXT SCX
NEXT SCY
RETURN

@MOVEBOX2
TMPYOFS=YOFS:TMPXOFS=XOFS:TMPBOXCLR=BOXCLR
YOFS=SCY+1:XOFS=SCX:CBOXCLR=BOXES(SCY,SCX)
BOXCLR=14
GOSUB @SETBOX
YOFS=YOFS+1
BOXCLR=CBOXCLR
GOSUB @SETBOX
YOFS=TMPYOFS:XOFS=TMPXOFS:BOXCLR=TMPBOXCLR
RETURN

'change box selection to new box
@INITNEWBOX
MBOXES(YOFS-1,XOFS)=0

SCX=XOFS:SCY=YOFS-1
SCCHECK=1:SCSUM=0:SCCOLOR=BOXES(SCY,SCX)
GOSUB @RMBOXBUNCH
IF SCSUM>3 THEN SCCHECK=0:POINTS=POINTS+(SCSUM*10)
SCCOLOR=SCCOLOR*-1
GOSUB @RMBOXBUNCH

BOXROW=-1
GOTO @RUN

'remove box bunch
@RMBOXBUNCH
SCSUM=SCSUM+1
IF SCCHECK==1 THEN BOXES(SCY,SCX)=BOXES(SCY,SCX)*-1
IF SCCHECK==0 THEN BOXCLR=14:YOFS=SCY+1:XOFS=SCX:GOSUB @SETBOX
IF SCX>0 THEN GOSUB @RMBOXBUNCHLEFT
IF SCX+1<8 THEN GOSUB @RMBOXBUNCHRIGHT
IF SCY>0 THEN GOSUB @RMBOXBUNCHTOP
IF SCY+1<11 THEN GOSUB @RMBOXBUNCHBOTTOM
RETURN

@RMBOXBUNCHLEFT
'do not remove boxes of another color / moving boxes
IF BOXES(SCY,SCX-1)!=SCCOLOR OR MBOXES(SCY,SCX-1)==1 THEN RETURN
SCX=SCX-1
GOSUB @RMBOXBUNCH 'recursion to find/remove more boxes of the same color
SCX=SCX+1
RETURN

@RMBOXBUNCHRIGHT
IF BOXES(SCY,SCX+1)!=SCCOLOR OR MBOXES(SCY,SCX+1)==1 THEN RETURN
SCX=SCX+1
GOSUB @RMBOXBUNCH
SCX=SCX-1
RETURN

@RMBOXBUNCHTOP
IF BOXES(SCY-1,SCX)!=SCCOLOR OR MBOXES(SCY-1,SCX)==1 THEN RETURN
SCY=SCY-1
GOSUB @RMBOXBUNCH
SCY=SCY+1
RETURN

@RMBOXBUNCHBOTTOM
IF BOXES(SCY+1,SCX)!=SCCOLOR OR MBOXES(SCY+1,SCX)==1 THEN RETURN
SCY=SCY+1
GOSUB @RMBOXBUNCH
SCY=SCY-1
RETURN

'update time output in header
@UPDATETIME
TSTEP=0
TIME=TIME+1
LOCATE 5,1:?TIME
RETURN

'update points output in header
@UPDATEPOINTS
LOCATE 28-LEN(STR$(POINTS)),1:?POINTS
RETURN

'change box position to left if possible
@SETXOFSLEFT
IF BOXES(YOFS,XOFS-1)==14 THEN NXOFS=XOFS-1
LASTBTN=0
RETURN

'change box position to right if possible
@SETXOFSRIGHT
IF BOXES(YOFS,XOFS+1)==14 THEN NXOFS=XOFS+1
LASTBTN=0
RETURN

'main run logic
@RUN
IF TSTEP==60 THEN GOSUB @UPDATETIME
IF BOXROW==-1 THEN GOSUB @SETSTARTBOX
BTN=BUTTON()
IF BTN != 0 THEN LASTBTN=BTN
IF LASTBTN != BTN AND LASTBTN==4 AND XOFS>0 THEN GOSUB @SETXOFSLEFT
IF LASTBTN != BTN AND LASTBTN==8 AND XOFS<7 THEN GOSUB @SETXOFSRIGHT
IF BOXROW>-1 AND RCTN==30-BOXSPEED THEN GOSUB @MOVEBOX:GOSUB @MOVEBOXES
IF RCTN == 30-BOXSPEED THEN RCTN=0
GOSUB @UPDATEPOINTS
RCTN=RCTN+1
TSTEP=TSTEP+1
VSYNC 1
GOTO @RUN